import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:fyp/chat/widget/message_bubble.dart';

class ChatMessage extends StatelessWidget{
  const ChatMessage ({super.key});

  @override
  Widget build(BuildContext context) {
    final authenticatedUser = FirebaseAuth.instance.currentUser!;

    return StreamBuilder(
      stream: FirebaseFirestore.instance.collection('chat').orderBy('createAt',descending: true,).snapshots(), //may be change??
      builder: (ctx, chatSnapshots) {
        if (chatSnapshots.connectionState == ConnectionState.waiting) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        }

        if (!chatSnapshots.hasData || chatSnapshots.data!.docs.isEmpty){
          return Center(
            child: Text('No messages found.'),
          );
        }

        if(chatSnapshots.hasError){
          return Center(
            child: Text('Something went wrong...'),
          );
        }

        final loadedMessages = chatSnapshots.data!.docs;

        return ListView.builder(
          padding: const EdgeInsets.only(bottom: 40, left: 13, right: 13,),
          reverse: true,
          itemCount: loadedMessages.length,
          itemBuilder: (ctx, index) {
            final chatMessage = loadedMessages[index].data();
            final nextChatMessage = index + 1 < loadedMessages.length ? loadedMessages[index + 1].data() : null;

            final currentMessageUserId = chatMessage['user_id'];
            final nextMessageUserId = nextChatMessage != null ? nextChatMessage['user_id'] : null;
            final nextUserIsSame = nextMessageUserId == currentMessageUserId;

            if(nextUserIsSame){
              return MessageBubble.next(message: chatMessage['text'], isMe: authenticatedUser.uid == currentMessageUserId);
            } else{
              return MessageBubble.first(userImage: chatMessage['image_url'], username: chatMessage['username'], message: chatMessage['text'], isMe: authenticatedUser.uid == currentMessageUserId);
            }
          }
        );

      }
    );
    
    
  }
}